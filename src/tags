!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BigText	bigtext.h	/^  BigText(Adafruit_SSD1306& displayInstance) : display(displayInstance) {$/;"	f	class:BigText
BigText	bigtext.h	/^class BigText {$/;"	c
Cleared	main.cpp	/^  virtual void Cleared() {$/;"	f	struct:LRadar
Detected	main.cpp	/^  virtual void Detected(String& type, float distanceValue, float strengthValue, bool entry) {$/;"	f	struct:LRadar
LD2125	ld2125.h	/^  LD2125(int8_t RxPin = 33, int8_t TxPin = 32) : RadarSensor() {$/;"	f	class:LD2125
LD2125	ld2125.h	/^class LD2125 : public RadarSensor {$/;"	c
LD2411	ld2411.h	/^  LD2411(int8_t RxPin = 33, int8_t TxPin = 32) : RadarSensor() {$/;"	f	class:LD2411
LD2411	ld2411.h	/^class LD2411 : public RadarSensor {$/;"	c
LRadar	main.cpp	/^  LRadar(Adafruit_SSD1306& displayInstance) : LD2125(), display(displayInstance) {$/;"	f	struct:LRadar
LRadar	main.cpp	/^  LRadar(Adafruit_SSD1306& displayInstance) : LD2411(), display(displayInstance) {$/;"	f	struct:LRadar
LRadar	main.cpp	/^struct LRadar : public LD2125 {$/;"	s	file:
LRadar	main.cpp	/^struct LRadar : public LD2411 {$/;"	s	file:
LcdDebugStream	lwifi.cpp	/^  LcdDebugStream(ScrollingText& scroller) : _scroller(scroller) {}$/;"	f	class:LcdDebugStream
LcdDebugStream	lwifi.cpp	/^class LcdDebugStream : public Stream {$/;"	c	file:
MAX_STRING_SIZE	scroller.h	/^  static constexpr int MAX_STRING_SIZE = 120;$/;"	m	class:ScrollingText
OLED_RESET	scroller.h	/^constexpr int OLED_RESET = 16;$/;"	v
PROG_BUTTON_PIN	lwifi.cpp	/^constexpr int PROG_BUTTON_PIN = 0; \/\/ GPIO0$/;"	v
PowerLine	powerline.h	/^  PowerLine(Adafruit_SSD1306& displayInstance) : display(displayInstance) {}$/;"	f	class:PowerLine
PowerLine	powerline.h	/^class PowerLine {$/;"	c
READ_DISTANCE_LSB	ld2411.h	/^    READ_DISTANCE_LSB,$/;"	e	enum:LD2411::State
READ_DISTANCE_MSB	ld2411.h	/^    READ_DISTANCE_MSB,$/;"	e	enum:LD2411::State
READ_END_OF_FRAME_1	ld2411.h	/^    READ_END_OF_FRAME_1,$/;"	e	enum:LD2411::State
READ_END_OF_FRAME_2	ld2411.h	/^    READ_END_OF_FRAME_2$/;"	e	enum:LD2411::State
READ_TYPE	ld2411.h	/^    READ_TYPE,$/;"	e	enum:LD2411::State
RadarMqtt	mqtt.cpp	/^RadarMqtt::RadarMqtt(ScrollingText& scroller) : client(espClient), scroller(scroller) {$/;"	f	class:RadarMqtt
RadarMqtt	mqtt.h	/^struct RadarMqtt {$/;"	s
RadarSensor	radar.h	/^  RadarSensor() : distanceValue(0.0), strengthValue(0.0) {}$/;"	f	class:RadarSensor
RadarSensor	radar.h	/^class RadarSensor {$/;"	c
SCREEN_HEIGHT	scroller.h	/^constexpr int SCREEN_HEIGHT = 64;$/;"	v
SCREEN_WIDTH	scroller.h	/^constexpr int SCREEN_WIDTH = 128;$/;"	v
SSD1306_I2C_ADDRESS	scroller.h	/^constexpr int SSD1306_I2C_ADDRESS = 0x3C;$/;"	v
ScrollingText	scroller.h	/^  ScrollingText(Adafruit_SSD1306& displayInstance) : display(displayInstance) {$/;"	f	class:ScrollingText
ScrollingText	scroller.h	/^class ScrollingText {$/;"	c
State	ld2411.h	/^  enum State {$/;"	g	class:LD2411
WAIT_HEADER_1	ld2411.h	/^    WAIT_HEADER_1,$/;"	e	enum:LD2411::State
WAIT_HEADER_2	ld2411.h	/^    WAIT_HEADER_2,$/;"	e	enum:LD2411::State
_buffer	lwifi.cpp	/^  char _buffer[_bufferSize];$/;"	m	class:LcdDebugStream	file:
_bufferIndex	lwifi.cpp	/^  size_t _bufferIndex = 0;$/;"	m	class:LcdDebugStream	file:
_bufferSize	lwifi.cpp	/^  static const size_t _bufferSize = 128;$/;"	m	class:LcdDebugStream	file:
_scroller	lwifi.cpp	/^  ScrollingText& _scroller;$/;"	m	class:LcdDebugStream	file:
add_radar	mqtt.cpp	/^void RadarMqtt::add_radar(RadarSensor* new_radar) {$/;"	f	class:RadarMqtt
available	lwifi.cpp	/^  int available() { return 0; }$/;"	f	class:LcdDebugStream
calculateHeight	bigtext.h	/^  void calculateHeight() {$/;"	f	class:BigText
callback	mqtt.cpp	/^void RadarMqtt::callback(char* topic_str, byte* payload, unsigned int length) {$/;"	f	class:RadarMqtt
charWidth	scroller.h	/^  static constexpr int charWidth = 6;$/;"	m	class:ScrollingText
client	mqtt.h	/^  PubSubClient client;$/;"	m	struct:RadarMqtt
configModeCallback	lwifi.cpp	/^void configModeCallback (WiFiManager *myWiFiManager) {$/;"	f
decodeRadarDataFSM	ld2125.h	/^  virtual String decodeRadarDataFSM() {$/;"	f	class:LD2125
decodeRadarDataFSM	ld2411.h	/^  virtual String decodeRadarDataFSM() {$/;"	f	class:LD2411
display	bigtext.h	/^  Adafruit_SSD1306& display;$/;"	m	class:BigText
display	main.cpp	/^  Adafruit_SSD1306& display;$/;"	m	struct:LRadar	file:
display	powerline.h	/^  Adafruit_SSD1306& display;$/;"	m	class:PowerLine
display	scroller.h	/^  Adafruit_SSD1306& display;$/;"	m	class:ScrollingText
displayBuffer	scroller.h	/^  char displayBuffer[SCREEN_WIDTH \/ charWidth + 1] = {};$/;"	m	class:ScrollingText
displayLargeDistance	bigtext.h	/^  void displayLargeDistance(float distance, int x = 0, int y = 0) {$/;"	f	class:BigText
distance	ld2411.h	/^  uint16_t distance = 0;$/;"	m	class:LD2411
distanceValue	radar.h	/^  float distanceValue = 0.0;$/;"	m	class:RadarSensor
dname	mqtt.h	/^  static constexpr const char* dname = "radar";$/;"	m	struct:RadarMqtt
espClient	mqtt.h	/^  WiFiClient espClient;$/;"	m	struct:RadarMqtt
finishedScrolling	scroller.h	/^  bool finishedScrolling = false;$/;"	m	class:ScrollingText
flush	lwifi.cpp	/^  void flush() { flushBuffer(); }$/;"	f	class:LcdDebugStream
flushBuffer	lwifi.cpp	/^  void flushBuffer() {$/;"	f	class:LcdDebugStream	file:
force	scroller.h	/^  void force() {$/;"	f	class:ScrollingText
handle	mqtt.cpp	/^void RadarMqtt::handle() {$/;"	f	class:RadarMqtt
lastScrollTime	scroller.h	/^  unsigned long lastScrollTime = 0;$/;"	m	class:ScrollingText
loop	main.cpp	/^void loop() {$/;"	f
max_width	bigtext.h	/^  uint16_t max_width = 0;$/;"	m	class:BigText
mirror	radar.h	/^  void mirror() {$/;"	f	class:RadarSensor
mqtt_server	lwifi.cpp	/^char mqtt_server[64] = "mqtt2.mianos.com"; \/\/ Default MQTT server$/;"	v
mqtt_server	mqtt.h	/^  static constexpr const char* mqtt_server = "mqtt2.mianos.com";$/;"	m	struct:RadarMqtt
mqtt_update_presence	mqtt.cpp	/^void RadarMqtt::mqtt_update_presence(bool entry, bool other, float distance, float strengthValue) {$/;"	f	class:RadarMqtt
num_height	bigtext.h	/^  uint16_t num_height;$/;"	m	class:BigText
peek	lwifi.cpp	/^  int peek() { return -1; }$/;"	f	class:LcdDebugStream
processRadarData	radar.h	/^  void processRadarData(float minStrength = 0.0) {$/;"	f	class:RadarSensor
radar	mqtt.h	/^  RadarSensor* radar = nullptr; \/\/ Use nullptr instead of 0 for pointer initialization$/;"	m	struct:RadarMqtt
radarSensor	main.cpp	/^} *radarSensor;$/;"	v	typeref:struct:LRadar
read	lwifi.cpp	/^  int read() { return -1; }$/;"	f	class:LcdDebugStream
reconnect	mqtt.cpp	/^void RadarMqtt::reconnect() {$/;"	f	class:RadarMqtt
report_ranges	mqtt.h	/^  bool report_ranges = false;$/;"	m	struct:RadarMqtt
scroll	scroller.h	/^  bool scroll(bool no_clear=false) {$/;"	f	class:ScrollingText
scrollDelay	scroller.h	/^  static constexpr int scrollDelay = 100;$/;"	m	class:ScrollingText
scroller	mqtt.h	/^  ScrollingText& scroller;$/;"	m	struct:RadarMqtt
set_silence_period	radar.h	/^  void set_silence_period(int silence_period) {$/;"	f	class:RadarSensor
setup	main.cpp	/^void setup() {$/;"	f
show	powerline.h	/^  void show(int percentage) {$/;"	f	class:PowerLine
silence	radar.h	/^  int silence = 2000;$/;"	m	class:RadarSensor
startScrolling	scroller.h	/^  void startScrolling() {$/;"	f	class:ScrollingText
state	ld2411.h	/^  State state = WAIT_HEADER_1;$/;"	m	class:LD2411
strengthValue	radar.h	/^  float strengthValue = 0.0;$/;"	m	class:RadarSensor
taf	scroller.h	/^  void taf(const char *format, ...) {$/;"	f	class:ScrollingText
text	scroller.h	/^  String text;$/;"	m	class:ScrollingText
textList	scroller.h	/^  LinkedList<String> textList;$/;"	m	class:ScrollingText
textPosition	scroller.h	/^  int textPosition = 0;$/;"	m	class:ScrollingText
twi	main.cpp	/^TwoWire twi = TwoWire(1); \/\/ create our own TwoWire instance$/;"	v
type	ld2411.h	/^  uint8_t type = 0;$/;"	m	class:LD2411
type	radar.h	/^  String type;$/;"	m	class:RadarSensor
wifi_connect	lwifi.cpp	/^void wifi_connect() {$/;"	f
write	lwifi.cpp	/^  size_t write(const uint8_t *buffer, size_t size) {$/;"	f	class:LcdDebugStream
write	lwifi.cpp	/^  size_t write(uint8_t data) {$/;"	f	class:LcdDebugStream
